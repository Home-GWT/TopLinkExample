package com.java;


/**
 * https://www.otstavnov.com/Odersky_Scala_lecture-notes.html
 *
 * Функции высокого порядка
 * Каррирование
 */
public class Forbes {

    public static void main(String[] args) {
        System.out.println( func(3) );  // обычная рекурсия
        System.out.println( add(3,3) ); // хвостовая рекурсия
    }

    ///////////////////////////////////////////////////////////////////////////
    /*
     * При обычной рекурсии - в теле функции остается лежать текущее значение переменной.
     * И каждый раз когда функция вызывает саму-себя - клонируется тело этой функции, но уже с другим значением переменной.
     * И таких клонов может быть безконечное количество - именно это услоие (наличие безконечного количества клонов) и приводит к переполнение стэка.
     */
    static int func(int n){
        if(n==0) return 0;
        return n + func(n-1); //return n+func(--n); //return n+func(n--);
    }

    ///////////////////////////////////////////////////////////////////////////
    /*
     * В хвостовой рекурсии - в теле функции никакие переменные вообще не храняться!
     * Все значения для переменных передаются только в параметрах функции.
     * В теле самой-же функции лежит только оператор-возврата значения. А все значения вычисляются на уровне, в момент передачи параметров.
     * То есть, каждый раз когда функция вызывает саму-себя старое тело функции уничтожается! И поэтому клон функции будет всегда один (это значит что переполнения стэка никогда не наступит)
     */
    static int add(int nun, int step){
        if(step==0) return nun; //return 1;
        return add((nun+(step-1)), step-1);
    }

}
