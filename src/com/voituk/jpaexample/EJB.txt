
   (Java EE - что это, ее неполное составляющее) http://reka-neva.blogspot.com/2014/08/java-ee.html
        (Общие сведения о технологиях EJB и JPA) http://javasource.ru:5050/articles.xhtml?artlink=general-information-about-ejb-jpa
                                              () http://umk3.utmn.ru/files/0000096543.pdf
                                              () http://www.des4web.ru/e-Shop/gl10.html
(Как HTTPS обеспечивает безопасность соединения) https://habrahabr.ru/post/188042/
                              (Архитектура REST) https://habrahabr.ru/post/38730/
    (Создание приложения J2EE с помощью EJB 3.1) https://netbeans.org/kb/docs/javaee/javaee-entapp-ejb_ru.html
                                              () https://habrahabr.ru/post/131343/
    (Лучше иногда падать, чем никогда не летать) http://www.warenhaus.com.ua/?p=1088
 ----------------------------------------------

> Технология Enterprise JavaBeans (EJB) ... реализация защищённого взаимодействия для распределённых открытых систем с помощью технологии Enterprise JavaBeans.
                                            это архитектурное решение, модель для распраделенного вычисления (все службы, предоставляемые этой технологией, остаются прозрачными для разработчика).
  J2EE-приложение состоит из:
  - Веб-уровень ...... (Веб-модуль: представление клиентских веб-страниц)
  - Бизнес-уровень ... (сервис/служба которая согласно бизнес плану предоставляет запрашиваемую информацию)
  - EJB-модуль ....... (Бин: кратко/временно хранимые объекты - компоненты используемые 'бизнес-уровнем', прослойка между 'EIS-уровень' и 'бизнес-уровнем')
  - EIS-уровень ...... (долго хранимые объекты: база данных)

>> EJB предоставляет три вида сеансных компонентов:
  - 'Stateful' - с поддержкой состояния: состояние компонента сохраняется между вызовами методов ("Состояние" - это значения переменных экземпляра).
  - 'Stateless' - без поддержки состояния: такие компоненты используется для операций, происходящих в течение одного вызова метода (при завершении выполнения метода состояние, зависящее от клиента, не сохраняется).
  - 'Singleton' - одноэкземплярный сеансный компонент создается в приложении в единственном числе и существует в течение всего жизненного цикла приложения.
  + + + + + + + + + + + + + + + + + + + + + + + [ Технологии JavaEE ]
  Технология Enterprise JavaBeans (EJB) - это высокоуровневая технология создания распределенных приложений которая использует низкоуровневый API (базирующаяся на использовании компонентов) для управления транзакциями.
                                          При создании распределенных систем её бизнес-логика реализована на уровне этих Компонентов.
  EJB-компоненты выполняются под управлением EJB-сервера который выполняет роль связующего звена между контейнерами и операционной средой.
  EJB-сервер обеспечивает доступ EJB-контейнерам к системным сервиса:
  - Создание пула ..................... (для каждого компонента EJB платформа EJB создает пул совместно используемых клиентами экземпляров компонента)
  - Многопоточная ориентированность ... (EJB делает все компоненты ориентированными на многопоточное исполнение и высокопроизводительными)
  - Транзакции ........................ (EJB поддерживает управление объявленными транзакциями которое позволяет добавить транзакционное поведение к компонентам путем настройки а не программирования)
  - Безопасность ...................... (EJB поддерживает интеграцию с интерфейсом API службы проверки подлинности и авторизации Java JAAS)
  + Lifecycle Management .............. индивидуальные ентерпрайс бины не нуждаются в явном управлении процессом, управлении потоками, активации объектов или их разрушении. EJB контейнер автоматически управляет жизненным циклом объекта.
  + State Management .................. индивидуальные ентерпрайс бины не нуждаются в явном сохранении или восстановлении состояния объекта между вызовами методов. EJB контейнер автоматически управляет состоянием объекта.
  + Security .......................... индивидуальные бины не нуждаются в явной аутентификации пользователей или проверке авторизационных уровней. EJB контейнер автоматически производит все проверки безопасности.
  + Transactions ...................... бин не обязан явно определять код транзакций для участия в распределенных транзакциях. EJB контейнер может автоматически управлять стартом, откатом, записью транзакций по требованию бина.
  + Persistence ....................... EJB-контейнер автоматически управляет сохранением данных.
  
  

> JAX-RS ........................ API для разработки RESTful Web Services.
> JAX-WS ........................ API для разработки Web Services на основе SOAP и WSDL.
> JAX-RPC ....................... API для разработки Web Services через протокол RPC.
> SAAJ .......................... API низкого уровня для работы с SOAP Web Services, а так-же позволяет прикреплять приложения к месседжам SOAP.


                                            SOAP – это целое семейство протоколов и стандартов
>> Протокол SOAP (Simple Object Access Protocol) — определяет стандарты для кодирования различных типов данных и соглашений о представлении вызывающих методов в удаленных объектах.
                                                  Это «легкий»протокол для обмена сообщениями между объектами в распределенной среде, с использованием XML и передачи простого (plain) текста через стандартный порт HTTP сообщения SOAP могут передаваться через брандмауэры.
>> REST (Representational state transfer) – это стиль архитектуры программного обеспечения для распределенных систем
                                            это не протокол и не стандарт (SOAP и REST – не конкуренты), а архитектурный стиль


>> Как правило, запросы передаются посредством обычного HTTP, в котором и запрос клиента, и ответ сервера передаются в открытом виде.
   Когда по каналу связи передается важная информация (пароли,кредитные карты) необходимо обеспечить меры предотвращающие прослушивание таких соединений.
   - Transport Layer Security (TLS) - наследник SSL - протокол часто применяемый для обеспечения безопасного HTTP соединения (HTTPS).
                                      TLS расположен на уровень ниже протокола HTTP (это означает что в процессе выполнения запроса сперва происходят все вещи связанные с TLS-соединением и уже потом все что связано с HTTP-соединением).
TLS - гибридная криптографическая система, она использует несколько криптографических подходов:
      1) Асиметричное шифрование (криптосистема с открытым ключом) для генерации общего секретного ключа и аутентификации (удостоверения в том что вы - тот за кого себя выдаете).
      2) Симметричное шифрование, использующее секретный ключ для дальнейшего шифрования запросов и ответов.

Отличие ролей от групп:
- Членство в группе - статическое
- Роли могут быть динамическими





