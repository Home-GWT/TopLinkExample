http://latysheva2007.narod.ru/theme13.html



---------------------------
Нужно всегда помнить о том что любой 'сервер приложений' является обычной программой, которая установлена внутри Операционной Системы и управляется этой Операционной Системой.
То есть, при любом обращении к серверу приложений все команды и вся информация прежде всего проходит через саму Операционную Систему.
Это значит что: Операционная Система тоже умеет логировать (и логирует) все действия которые выполняются внутри или при обращении к этой Операционной Системе...
Таким образом злоумышленик может получить доступ (перехватить) к любой информации (и конфиденциальная информации тоже): это данные внутри клиентских запросов, которые отправляют разные клиенты...



Что такое клиентский запрос:
---------------------------[ https:80//mail.yandex.ua/2013/05?uid=40270829&login=sashakmets#inbox ]
Прежде всего 'клиентский запрос' это URL-адресс (команда), который имеет такую структуру:
1. 'протокол' (http, https | ssl, ftp, sftp, smtp, pop, ...) - определяет с помощью какой программы будет выполнена транспортировка данных
2. 'порт' - определяет внутренний номер-адресс программы-слушателя (то есть, Операционная Система регистрирует 'сокет' (программу-слушателя) для центральной точки входа, на которую будут перенаправлены все клиентские запросы чтобы обрабатывать данные этих запросов...)
3. 'имя домена' - определяет к какому клиенту будет отправлен клиентский запрос (то биш, любой 'клиентский запрос' это обращения между 'клиентами' через 'хост', который подключает и регистрирует всех своих клиентов...)
4. 'путь расположения файла на стороне сервера' - то есть, на сервере приложения файлы являются обработчиком данных...
5. 'параметры и значения' - это дополнительные клиентские данные которые будут обрабатываться обработчиком на стороне сервера
6. 'служебная информация' - используется в разметке к обращаемому файлу-обработчику, на тот случай если если требуется НЕвся информация, а только какая-то часть информации из этого файла-обработчика...

    [1]   [2]          [3]         [4]                  [5]                 [6]
   _____   __    ______________  _______   _____________________________   _____
   https : 80 // mail.yandex.ua /2013/05 ? uid=40270829&login=sashakmets # inbox

> На стороне клиента-отправителя определяется протокол-программа для транспортировки данных (и порт на котором работает эта программа-слушателя внутри Операционной Системы)
> Потом по имени домена определяется клиент-получатель (который подключен и зарегистрирован на хосте-провадера)
> Дальше вся информация (путь расположения файла-обработчика на стороне сервера, параметры и значения, служебная информация) передается через хост-провайдера на клиент-получатель

> 'Клиент-отправитель' - представляет собой программу клиента: это веб-браузер, ...
> 'Клиент-получатель' - представляет собой сервер приложений...:
  - 'сервер приложений' это менеджер файлов
  - каждый файл, внутри такого менеджера файлов (сервера приложений), является обработчиком клиентских данных
  - при обращении к такому файлу-обработчику можно:
    -- либо передавать данные в виде файла-тела-запроса для (операции) ЗАПИСИ в этот файл-обработчик;
	-- либо запрашивать данные для (операции) ЧТЕНИЯ из этого файла-обработчика тоже в виде файла-HTML-документа;
  - (важно понимать что на этом этапе Операционная Система логирует все обращения которые проходят через нее, это только: 'путь расположения файла на стороне сервера' + 'параметры и значения' + 'служебная информация'. Содержимое файлов которые передаются в клиентских запросах Операционная Система уже НЕлогирует. Поэтому если передать в 'параметры и значения' пароль клиента - тогда злоумышленик сможет его перехватить, прочитать из логов Операционной Системы)

> Внутри Операционной Системы для каждого клиента-пользователя существует:
  - учетная запись пользователя (которая позволяет идентифицировать пользователя по логину|паролю И определить его права доступа)
  - пользовательская папка в которой хранится информация (сохраненная в виде файлов) о всех пользовательских настройках при работе с разными приложениями
> Сервер приложений внутри устроен и работает по аналогии подобно как Операционная Система:
  - учетные записи клиентов (по которым можно идентифицировать клиента) хранятся либо в базе данных, либо внутри конфигурационного файла сервера приложений
  - 'сессия' на сервере приложений представляет собой файл в которой хранится информация о всех клиентских настройках, которые передаются в клиентских запросах
    -- по умолчанию, файл-сессии живет еще 30-минут после последней активности клиента, а потом автоматически уничтожается сервером приложений
  - 'токен сессии' (это механизм по которому каждый клиент распознается на сервере приложений):
    -- один и тот-же клиент может иметь разный IP-адресс (это динамический адресс клиентского компьютера внутри компьютерной сети, по коорому провайдер-хоста находит этого клиента...то есть, при каждом новом подключении к провайдеру-хоста клиент может иметь разные IP-адресса)
	-- 'клиентский запрос' представляет собой объект с полями (например: IP-адресс, токен сессии, зафиксированное время клиентского запроса, тип клиентского браузера, ...)
	-- 'токен сессии' является единственным постоянным параметром, который определяет и хранит информации о каждом уникальном клиенте на сервре приложения по признаку клиентских запросов (например: сервер приложений позволяет настроить ограниченное количество для поддержки параллельных клиентов которые могут одновременно находиться на этом сервере...с помощью наличия сессий)
	-- итак, при первом обращении клиентского запроса на сервер приложений (автоматически) создается файл-сессии для каждого уникального клиента;
	   название этого файла-сессии является токеном сессии И такой токен сессии возвращается в ответ клиенту на его запрос;
	   веб-браузер на стороне клиента-отправителя сохраняет этот токен сессии в кеше...И дальше в каждом следующем клиентском запросе веб-браузер уже автоматически передает сохраненное значение поля полученного токена сессии;
	   на стороне сервера приложений по токену сессии выполняется поиск файла-сессии и обновляется состояние (настройка) всех его полей...;
	   сами-же протокол(ы) НЕподдерживают механизм сохранения информации между клиентскими запросами...этот механизм реализован с помощью сессии;
	   НО первоначально, когда еще НЕбыло серверов приложений (для работы с динамическими веб-страницами), были веб-сервера (которые умеют работать только со статическими веб-страницами) И информация между клиентскими запросами хранилась в веб-браузере на стороне клиента-отправителя 'кука' (это объект клиентского запроса с полями которые хранят состояние-настройки между клиентскими запросами...). КУКА передается в HEAD-блоке клиентского запроса. Дело в том что веб-сервер тоже умеет логировать клиентские запросы, в этом числе и логируется та открытая информация которая передается с куками в клиентском запросе...то есть, злоумышленник сможет из логов веб-сервера получить НЕзащищенную информацию клиентского пароля. Поэтому куки являются НЕбезопасными;
	   (например: в момент при идентификации клиента сервер приложения проверяет наличие сессии по токену сессии из клиентского запроса. Если сессия отсутствует - тогда сервер приложения отправляет клиенту запрос (Audentification 401) для прохождения идентификации И тогда веб-браузер автоматически предлагает клиентскую форму для заполнения полей логина|пароля. Информация о результате прохождения аудитенфикации хранится в файле-сессии И даже когда клиент откажется идентифицироваться, при всех следующих клиентских запросах сервер приложений сохранит это состояние-настройку клиента об отказе и НЕдаст клиенту снова пройти идентификацию в следующем клиентском запросе на время жизни сессии...)
  - токен-сессии: это тоже КУКА, она может передаваться разными способами (в URL-адрессе, в HEAD-блоке) И является НЕбезопасным (то есть, эта информация логируется);
    -- злоумышленник сможет перехватить токен-сессии и получить доступ сессии клиента (и владеть его информацией);
	-- НО сессия живет короткое время. Поэтому превосходством использования токена-сессии в том что он является одноразовым, то есть, в следующий раз в другой сессии злоумышленику та сессия будет уже НЕдоступна;
> Итак, и Операционной Системой и веб-сервером логируется информация из URL-адресса (команды) и из HEAD-блока, которая передается в клиентском запросе... Поэтому;
  - информация которая передается в КУКАХ и в URL являются НЕбезопасной
  - и HEAD-блок и URL-адресс всегда являются стандартным и постоянними компонентами в HTTP-протоколе (независимо от того какой тип клиента будет использовать этот протокол...)
  - что-бы защитить клиентскую информацию, данные передаются внутри тела-клиентского-запроса (методами POST, PUT, OPTION): тело-клиентского-запроса представляет собой файл предназначенный для ЗАПИСИ сервером приложений (менеджером файлов) в файл-обработчик (все передаваемые файлы и файл-сессии - НЕлогируются...)





